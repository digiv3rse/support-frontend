AWSTemplateFormatVersion: '2010-09-09'
Description: Proxy instance for kibana

Parameters:
  AMI:
    Description: AMI ID (will be set by RiffRaff to the latest baked AMI)
    Type: String
  VpcId:
    Description: "ID of the VPC onto which to launch the instance eg. vpc-1234abcd"
    Type: AWS::EC2::VPC::Id
    Default: vpc-e6e00183

Resources:
  KibanaProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ELK proxy instance. Accesses ES service in private subnet and also cognito on the internet.
      GroupName: elk-proxy
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref ProxyLoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: sg-05c221879675c1e45 # ES service

  StandardSSMRunCommandPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: standard-app-ssm-run-command-policy
      PolicyDocument:
        Statement:
        # minimal policy to allow to (only) run commands via ssm
        - Effect: Allow
          Resource: "*"
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          - ssm:UpdateInstanceInformation
          - ssm:ListInstanceAssociations
          - ssm:DescribeInstanceProperties
          - ssm:DescribeDocumentParameters
      Roles:
      - !Ref KibanaProxyRole
  KibanaProxyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref KibanaProxyRole
  KibanaProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal: { Service: ["ec2.amazonaws.com"] }
          Action: [ "sts:AssumeRole" ]
      Path: /

  KibanaProxyInstance:
    Type: AWS::EC2::Instance
    Properties:
        ImageId: !Ref AMI
        InstanceType: t3.micro
        IamInstanceProfile: !Ref KibanaProxyInstanceProfile
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            apt-get update
            apt-get install nginx -y
            service nginx stop
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/cert.key -out /etc/nginx/cert.crt -subj "/C=UK/ST=London/L=London/O=GNM/OU=Guardian Digital/CN=Reader Revenue"
            cat << 'EOF' > /etc/nginx/conf.d/default.conf
            server {
                listen 443;
                server_name $host;
                rewrite ^/$ https://$host/_plugin/kibana redirect;

                ssl_certificate           /etc/nginx/cert.crt;
                ssl_certificate_key       /etc/nginx/cert.key;

                ssl on;
                ssl_session_cache  builtin:1000  shared:SSL:10m;
                ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
                ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
                ssl_prefer_server_ciphers on;

                access_log  /dev/null;
                error_log   /dev/null   crit;

                location ^~ /_plugin/kibana {
                    # Forward requests to Kibana
                    proxy_pass https://vpc-support-elk-domain-vcesheatvi6xspmp4sd6dnfkq4.eu-west-1.es.amazonaws.com/_plugin/kibana;

                    # Handle redirects to Amazon Cognito
                    proxy_redirect https://subscription-logs.auth.eu-west-1.amazoncognito.com https://$host;

                    # Update cookie domain and path
                    proxy_cookie_domain vpc-support-elk-domain-vcesheatvi6xspmp4sd6dnfkq4.eu-west-1.es.amazonaws.com $host;

                    proxy_set_header Accept-Encoding "";
                    sub_filter_types *;
                    sub_filter vpc-support-elk-domain-vcesheatvi6xspmp4sd6dnfkq4.eu-west-1.es.amazonaws.com $host;
                    sub_filter_once off;

                    # Response buffer settings
                    proxy_buffer_size 128k;
                    proxy_buffers 4 256k;
                    proxy_busy_buffers_size 256k;
                }
             
                location ~ \/(log|sign|error|fav|forgot|change) {
                    # Forward requests to Cognito
                    proxy_pass https://subscription-logs.auth.eu-west-1.amazoncognito.com;

                    # Handle redirects to Kibana
                    proxy_redirect https://vpc-support-elk-domain-vcesheatvi6xspmp4sd6dnfkq4.eu-west-1.es.amazonaws.com https://$host;

                    # Handle redirects to Amazon Cognito
                    proxy_redirect https://subscription-logs.auth.eu-west-1.amazoncognito.com https://$host;

                    # Update cookie domain
                    proxy_cookie_domain subscription-logs.auth.eu-west-1.amazoncognito.com $host;
                }

                location /nginx-health {
                    return 200 "healthy\n";
                }
            }
            EOF
            service nginx start
        NetworkInterfaces:
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet:
              - !GetAtt KibanaProxySecurityGroup.GroupId
            SubnetId: subnet-0d6f657eea1baf777


  ProxyLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer in front of the ELK proxy instance.
      GroupName: elk-proxy-elb
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 77.91.248.0/21

  ProxyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: KibanaProxyLoadBalancer
      SecurityGroups:
        - !Ref ProxyLoadBalancerSecurityGroup
      Subnets:
        - subnet-087346aaeef11b924
        - subnet-0d6f657eea1baf777

  ProxyLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: arn:aws:acm:eu-west-1:865473395570:certificate/10089f88-7023-4e44-9e92-1107e0423e94
      DefaultActions:
      - TargetGroupArn: !Ref KibanaTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ProxyLoadBalancer
      Port: 443
      Protocol: HTTPS

  KibanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 443
      Protocol: HTTPS
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /nginx-health
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 15
      Targets:
      - Id: !Ref KibanaProxyInstance
        Port: 443

  Route53DNSConfig:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: membership-aws.gutools.co.uk.
      Name: support-logs.membership-aws.gutools.co.uk.
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt ProxyLoadBalancer.DNSName
