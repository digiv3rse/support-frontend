---
AWSTemplateFormatVersion: '2010-09-09'
Description: API for acquisition events
Parameters:
  CertificateArn:
    Description: ARN of the certificate
    Type: String
  App:
    Description: Acquisition Events Api
    Type: String
    Default: acquisition-events-api
  DeployBucket:
    Description: Bucket to copy files to
    Type: String
    Default: membership-dist
  Stack:
    Description: Stack name
    Type: String
    Default: support
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - CODE
      - PROD
Mappings:
  StageMap:
    CODE:
      DomainName: acquisition-events-code.support.guardianapis.com
      CorsOrigin: "'*'"
    PROD:
      DomainName: acquisition-events.support.guardianapis.com
      CorsOrigin: "'*'"
Resources:
  ApiGateway5XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName:
        Fn::Sub: acquisition-events-api-${Stage} API gateway 5XX response
      AlarmDescription: Acquisition events API failed to process an event
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value:
            Fn::Sub: acquisition-events-api-${Stage}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      Statistic: Sum
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn:
        Ref: CertificateArn
      DomainName:
        Fn::FindInMap:
          - StageMap
          - Ref: Stage
          - DomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
  LambdaAcquisitionEventPermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Lambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/acquisition
          - __ApiId__:
              Ref: ServerlessRestApi
            __Stage__: "*"
  ServerlessRestApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ServerlessRestApiDeployment0eaecd80e2
      RestApiId:
        Ref: ServerlessRestApi
      StageName: Prod
  ServerlessRestApiDeployment0eaecd80e2:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: 'RestApi deployment id: 0eaecd80e2ee9fd80faf745412676700de78c061'
      RestApiId:
        Ref: ServerlessRestApi
      StageName: Stage
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaRolePolicy1
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource:
                - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/acquisition-events-api/bigquery-config/${Stage}/*
        - PolicyName: LambdaRolePolicy2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - arn:aws:s3::*:membership-dist/*
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  ApiGateway4XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName:
        Fn::Sub: acquisition-events-api-${Stage} API gateway 4XX response
      AlarmDescription: Acquisition Events API received an invalid request
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value:
            Fn::Sub: acquisition-events-api-${Stage}
        - Name: Method
          Value: POST
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 300
      EvaluationPeriods: 1
      Statistic: Sum
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId:
        Ref: ServerlessRestApi
      DomainName:
        Ref: DomainName
      Stage:
        Fn::Sub: Prod
    DependsOn: ServerlessRestApiProdStage
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: support.guardianapis.com.
      Name:
        Fn::FindInMap:
          - StageMap
          - Ref: Stage
          - DomainName
      Comment:
        Fn::Sub: CNAME for acquisition events endpoints ${Stage}
      Type: CNAME
      TTL: '120'
      ResourceRecords:
        - Fn::GetAtt:
            - DomainName
            - RegionalDomainName
  ServerlessRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: '1.0'
          title:
            Ref: AWS::StackName
        paths:
          "/acquisition":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations
              responses: {}
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseTemplates:
                      application/json: "{}\n"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin:
                        Fn::FindInMap:
                          - StageMap
                          - Ref: Stage
                          - CorsOrigin
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              consumes:
                - application/json
              summary: CORS support
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  description: Default response for CORS method
              produces:
                - application/json
        swagger: '2.0'
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key:
          Fn::Sub: "${Stack}/${Stage}/${App}/${App}.jar"
      Description: A lambda for acquisitions events api
      FunctionName:
        Fn::Sub: "${App}-${Stage}"
      Handler: com.gu.acquisitionEventsApi.Lambda::handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: java8.al2
      Timeout: 300
      Environment:
        Variables:
          STAGE:
            Ref: Stage
      Tags:
        - Key: lambda:createdBy
          Value: SAM
Conditions:
  IsProd:
    Fn::Equals:
      - Ref: Stage
      - PROD

