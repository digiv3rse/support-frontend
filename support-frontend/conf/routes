# ----- System ----- #

GET /healthcheck                                    controllers.Application.healthcheck

# ----- Unsupported Browsers ----- #

GET /unsupported-browser                            controllers.Application.unsupportedBrowser

# ----- Remove trailing slashes so that /uk/ redirects to /uk ---- #

GET  /*path/  controllers.Application.removeTrailingSlash(path: String)

# ----- Sitemap ----- #

GET /sitemap.xml                                    controllers.SiteMap.sitemap


# ----- Geo landings ----- #
GET /us                                             controllers.Application.redirect(location="/us/contribute")
GET /au                                             controllers.Application.redirect(location="/au/contribute")
GET /eu                                             controllers.Application.redirect(location="/eu/contribute")
GET /int                                            controllers.Application.redirect(location="/int/contribute")
GET /nz                                             controllers.Application.redirect(location="/nz/contribute")
GET /ca                                             controllers.Application.redirect(location="/ca/contribute")
GET /uk                                             controllers.Application.redirect(location="/uk/support")
GET /                                               controllers.Application.geoRedirect()


# ----- Bundles Landing Page ----- #

GET /support                                        controllers.Application.redirect(location="/uk/support")
GET /uk/support                                     controllers.Application.showcase()
# redirect from old ab test
GET /showcase                                       controllers.Application.permanentRedirect(location="/uk/support")


# ----- Events Redirect ----- #
GET /events/archive                                 controllers.Application.redirect(location="https://membership.theguardian.com/events/archive")
GET /masterclasses                                  controllers.Application.redirect(location="https://membership.theguardian.com/masterclasses")
GET /event/*eventId                                 controllers.Application.redirectPath(location="https://membership.theguardian.com/event/", eventId)


# This is a temporary client-side redirect based on geo-location
# Once we have a separate payment failure email for US and UK we can consider removing it

GET  /monthly-contributions                         controllers.Application.permanentRedirect(location="/contribute")

# Deprecated endpoints that we now redirect to the contribute page. Once we have established that no traffic
# is coming this way, we should remove them
GET  /contribute/recurring                          controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/recurring-guest                    controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/recurring/thankyou                 controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/recurring/pending                  controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/recurring/existing                 controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/one-off                            controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/one-off/thankyou                   controllers.Application.permanentRedirect(location="/contribute")
GET  /contribute/one-off/autofill                   controllers.Application.permanentRedirect(location="/contribute")


# ----- Contributions ----- #

GET  /contribute                                        controllers.Application.contributeGeoRedirect()
GET  /$country<(uk|us|au|eu|int|nz|ca)>/contribute      controllers.Application.contributionsLanding(country: String)
GET  /$country<(uk|us|au|eu|int|nz|ca)>/thankyou        controllers.Application.contributionsLanding(country: String)

+nocsrf
POST /contribute/recurring/create                   controllers.RegularContributions.create
GET  /support-workers/status                        controllers.SupportWorkersStatus.status(jobId: String)

# this endpoint should be removed once identity remove
# the need for a client token
+nocsrf
POST  /contribute/send-marketing                     controllers.IdentityController.submitMarketing

# ------ Identity ------ #
+nocsrf
PUT /identity/set-password-guest                 controllers.IdentityController.setPasswordGuest
GET /identity/get-user-type                      controllers.IdentityController.getUserType(maybeEmail: Option[String])
GET /identity/get-user                           controllers.IdentityController.getUser



# ----- Subscriptions ----- #

GET  /subscribe                                    controllers.Subscriptions.geoRedirect()
GET  /$country<(uk|us|au|eu|int|nz|ca)>/subscribe           controllers.Subscriptions.landing(country: String)

# This is just a fallback in case someone accidentally uses an unsupported country-specific
# subscribe route. We just redirect to the subscriptions site and let its geolocation handle it.
GET  /:country/subscribe                           controllers.Subscriptions.legacyRedirect(country: String)

GET  /digital                                           controllers.DigitalSubscription.digitalGeoRedirect()
GET  /subscribe/digital                                 controllers.DigitalSubscription.digitalGeoRedirect()
GET  /$country<(uk|us|au|eu|int|nz|ca)>/subscribe/digital     controllers.DigitalSubscription.digital(country: String)

# redirect from old checkout urls
GET  /$country<(uk|us|au|eu|int|nz|ca)>/subscribe/digital/checkout  controllers.Application.permanentRedirectWithCountry(country, location="/subscribe/digital/checkout")
GET  /subscribe/digital/checkout  controllers.DigitalSubscription.displayForm()
GET  /subscribe/digital/checkout/thankyou-existing  controllers.DigitalSubscription.displayThankYouExisting()

GET  /weekly                            controllers.Subscriptions.weeklyGeoRedirect()
GET  /subscribe/weekly                            controllers.Subscriptions.weeklyGeoRedirect()
GET  /$country<(uk|us|au|int|nz|ca|eu)>/subscribe/weekly   controllers.Subscriptions.weekly(country: String)

GET  /paper          controllers.PaperSubscription.paperMethodRedirect(withDelivery: Boolean = false)
GET  /subscribe/paper          controllers.PaperSubscription.paperMethodRedirect(withDelivery: Boolean = false)
GET  /subscribe/paper/delivery          controllers.PaperSubscription.paperMethodRedirect(withDelivery: Boolean = true)
GET  /uk/subscribe/paper          controllers.PaperSubscription.paper(withDelivery: Boolean = false)
GET  /uk/subscribe/paper/delivery          controllers.PaperSubscription.paper(withDelivery: Boolean = true)
GET  /subscribe/paper/checkout  controllers.PaperSubscription.displayForm()

GET /postcode-lookup/:postcode            controllers.GetAddress.findAddress(postcode: String)

POST /subscribe/create  controllers.CreateSubscription.create

# ----- Authentication ----- #

GET  /login                                         controllers.Login.login
GET  /loginAction                                   controllers.Login.loginAction
GET  /oauth2callback                                controllers.Login.oauth2Callback
GET  /logout                                        controllers.Login.logout
GET  /test-users                                    controllers.TestUsersManagement.createTestUser

# ----- PayPal (Recurring Endpoints) ----- #

+nocsrf
POST /paypal/setup-payment                          controllers.PayPalRegular.setupPayment
+nocsrf
POST /paypal/create-agreement                       controllers.PayPalRegular.createAgreement
GET  /paypal/return                                 controllers.PayPalRegular.returnUrl
GET  /paypal/cancel                                 controllers.PayPalRegular.cancelUrl

# ----- PayPal (One-off Endpoints) ----- #

# For PayPal one-off create a payment by sending a request to the payment API directly.
# <payment-api-host>/contribute/one-off/paypal/create-payment
# This requires return and cancel urls depending on whether the user authorized the payment or not.
# https://github.com/guardian/payment-api/blob/master/src/main/scala/model/paypal/PaypalPaymentData.scala#L74
GET  /paypal/rest/return                                controllers.PayPalOneOff.returnURL(paymentId: String, PayerID: String, country: Option[String] = None)
GET  /paypal/rest/cancel                                controllers.PayPalOneOff.cancelURL
GET  /paypal/rest/error                                 controllers.PayPalOneOff.paypalError

# TODO: more cleanup
GET  /$country<(uk|us|au|eu|int|nz|ca)>/paypal/rest/return   controllers.PayPalOneOff.newReturnURL(paymentId: String, PayerID: String, country: String)

# ----- Direct Debit ----- #
+nocsrf
POST /direct-debit/check-account                      controllers.DirectDebit.checkAccount

# ----- Verification ----- #

GET  /.well-known/*file   controllers.Assets.at(path="/public", file)

# ----- Assets ----- #
# See application.conf for cache time config

GET  /favicon.ico                                   controllers.Favicon.get

GET  /assets/*file                                  controllers.Assets.at(path="/public/compiled-assets", file)
GET  /*file                                         controllers.Assets.at(path="/public", file)
