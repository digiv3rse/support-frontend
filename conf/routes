# ----- System ----- #

GET /healthcheck                                    controllers.Application.healthcheck

# ----- Unsupported Browsers ----- #

GET /unsupported-browser                            controllers.Application.unsupportedBrowser

# ----- Bundles Landing Page ----- #

GET /uk                                             controllers.Application.supportLanding()
GET /us                                             controllers.Application.redirect(location="/us/contribute")
GET /au                                             controllers.Application.redirect(location="/au/contribute")
GET /eu                                             controllers.Application.redirect(location="/eu/contribute")
GET /int                                            controllers.Application.redirect(location="/int/contribute")
GET /nz                                             controllers.Application.redirect(location="/nz/contribute")
GET /ca                                             controllers.Application.redirect(location="/ca/contribute")
GET /                                               controllers.Application.geoRedirect()

GET /sitemap.xml                                    controllers.SiteMap.sitemap

# ----- Events Redirect ----- #
GET /events/archive                                 controllers.Application.redirect(location="https://membership.theguardian.com/events/archive")
GET /masterclasses                                  controllers.Application.redirect(location="https://membership.theguardian.com/masterclasses")
GET /event/*eventId                                 controllers.Application.redirectPath(location="https://membership.theguardian.com/event/", eventId)


# This is a temporary client-side redirect based on geo-location
# Once we have a separate payment failure email for US and UK we can consider removing it

GET  /monthly-contributions                         controllers.Application.contributionsRedirect()

# ----- Contributions ----- #

GET  /contribute                                    controllers.Application.contributeGeoRedirect()
GET  /uk/contribute                                 controllers.Application.contributionsLanding(id="contributions-landing-page-uk")
GET  /us/contribute                                 controllers.Application.contributionsLanding(id="contributions-landing-page-us")
GET  /au/contribute                                 controllers.Application.contributionsLanding(id="contributions-landing-page-au")
GET  /eu/contribute                                 controllers.Application.contributionsLanding(id="contributions-landing-page-eu")
GET  /int/contribute                                controllers.Application.contributionsLanding(id="contributions-landing-page-int")
GET  /nz/contribute                                 controllers.Application.contributionsLanding(id="contributions-landing-page-nz")
GET  /ca/contribute                                 controllers.Application.contributionsLanding(id="contributions-landing-page-ca")

GET  /contribute/recurring                          controllers.RegularContributions.displayForm()
GET  /contribute/recurring/thankyou                 controllers.RegularContributions.displayForm()
GET  /contribute/recurring/existing                 controllers.Application.reactTemplate(title="Support the Guardian | Existing Contributor", id="regular-contributions-existing-page", js="regularContributionsExistingPage.js")
POST /contribute/recurring/create                   controllers.RegularContributions.create
GET  /contribute/recurring/status                   controllers.RegularContributions.status(jobId: String)
GET  /contribute/recurring/pending                  controllers.RegularContributions.displayForm()

# this endpoint should be removed once identity remove
# the need for a client token
POST  /contribute/send-marketing                     controllers.IdentityController.submitMarketing


GET  /contribute/one-off                            controllers.OneOffContributions.displayForm()
GET  /contribute/one-off/thankyou                   controllers.OneOffContributions.displayForm()
GET  /contribute/one-off/autofill                   controllers.OneOffContributions.autofill

# ----- Subscriptions ----- #
GET  /subscribe                                    controllers.Subscriptions.geoRedirect()
GET  /uk/subscribe                                 controllers.Subscriptions.landing(title="Support the Guardian | Get a Subscription", id="subscriptions-landing-page", js="subscriptionsLandingPage.js")

# This is just a fallback in case someone accidentally uses an unsupported country-specific
# subscribe route. We just redirect to the subscriptions site and let its geolocation handle it.
GET  /:countryCode/subscribe                       controllers.Subscriptions.legacyRedirect(countryCode: String)


# ----- Authentication ----- #

GET  /login                                         controllers.Login.login
GET  /loginAction                                   controllers.Login.loginAction
GET  /oauth2callback                                controllers.Login.oauth2Callback
GET  /logout                                        controllers.Login.logout
GET  /test-users                                    controllers.TestUsersManagement.createTestUser


# ----- PayPal (Recurring Endpoints) ----- #

POST /paypal/setup-payment                          controllers.PayPalRegular.setupPayment
POST /paypal/create-agreement                       controllers.PayPalRegular.createAgreement
GET  /paypal/return                                 controllers.PayPalRegular.returnUrl
GET  /paypal/cancel                                 controllers.PayPalRegular.cancelUrl

# ----- PayPal (One-off Endpoints) ----- #

GET  /paypal/rest/return                                controllers.PayPalOneOff.returnURL(paymentId: String, PayerID: String)
GET  /paypal/rest/cancel                                controllers.PayPalOneOff.cancelURL

# ----- Direct Debit ----- #

POST /direct-debit/check-account                      controllers.DirectDebit.checkAccount

# ----- Assets ----- #

GET  /assets/*file                                  controllers.Assets.at(path="/public/compiled-assets", file)
GET  /*file                                         controllers.Assets.at(path="/public", file)
